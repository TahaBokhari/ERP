/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qasproject;

//import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import net.proteanit.sql.DbUtils;
import javax.swing.table.*;
//import net.proteanit.sql.DbUtils;


/**
 *
 * @author tahab
 */
public class GRNPet extends javax.swing.JFrame {

    /**
     * Creates new form GRNtechnical
     */
    Connection conn=null;
    DefaultTableModel dtm = new DefaultTableModel();
    private JTable table;
    
    public GRNPet() throws SQLException {
        initComponents();
        this.setTitle("Goods Receive Note (GRN Pet)");
        
        conn=DBconnection.connectDb();
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
	LocalDateTime now = LocalDateTime.now();
        
        date.setText(dtf.format(now));
        
        int sNo=generateSerialNumber();
        serialNumber.setText(String.valueOf(sNo));
        
        preparedBy.setText(QASProject.userName);
        
        //asking before closing
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        
        this.addWindowListener(new WindowAdapter() {
            
            public void windowClosing(WindowEvent e) {
            int confirmed = JOptionPane.showConfirmDialog(null, 
            "Do you want to close the program?", "Exit Program Message Box",
            JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
          String role=QASProject.userrole;
        
                    if(role.equals("Admin"))
                    {
                        adminHome obj=new adminHome();
                        obj.setVisible(true);
                        dispose();

                    }
                    
                    //manager
                    else if(role.equals("Manager"))
                    {
                        ManagerHome obj=new ManagerHome();
                        obj.setVisible(true);
                        dispose();

                    }
                    
                     //gateKeeper
                    else if(role.equals("Gate Keeper"))
                    {
                        gateKeeperHome obj=new gateKeeperHome();
                        obj.setVisible(true);
                        dispose();

                    }
                    //store Incharge
                    else if(role.equals("Store Incharge"))
                    {
                        storeInchargeHome obj=new storeInchargeHome();
                        obj.setVisible(true);
                        dispose();

                    }
                    
                    //finished goods store incharge
                    else if(role.equals("Warehouse Incharge"))
                    {
                        FinishedStoreInchargeHome obj=new FinishedStoreInchargeHome();
                        obj.setVisible(true);
                        dispose();
                    }
          //main menu
        }
  }
});
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        preparedBy = new javax.swing.JTextField();
        GeneralInfo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        serialNumber = new javax.swing.JTextField();
        date = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        gateInwardSerial = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        Home = new javax.swing.JButton();
        Logout = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        updateSupplier = new javax.swing.JTextField();
        updateMaterial = new javax.swing.JTextField();
        updateItemCode = new javax.swing.JTextField();
        updateQuantity = new javax.swing.JTextField();
        updateUnitPrice = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        updateTotalPrice = new javax.swing.JTextField();
        updateRow = new javax.swing.JButton();
        deleteRow = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        testedQuantity = new javax.swing.JTextField();
        wetQuantity = new javax.swing.JTextField();
        percentageWet = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        remainingQty = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        storeLocation = new javax.swing.JTextField();

        jLabel10.setText("Quantity:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Prepared by / له خوا چمتو شوی:");

        submit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        submit.setText("Submit / وسپارئ");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        preparedBy.setEditable(false);
        preparedBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preparedByActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(preparedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(811, 811, 811)
                .addComponent(submit))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(preparedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(submit)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        GeneralInfo.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Serial Number / د سلسلې نمره :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Date / نیټه :");

        serialNumber.setEditable(false);
        serialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialNumberActionPerformed(evt);
            }
        });

        date.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Gate Inward Serial / د ګیټ داخلي سیرل  :");

        search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        search.setText("Search / لټون");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        Home.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Home.setText("Home / کور");
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        Logout.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Logout.setText("Log out / وتل");
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GeneralInfoLayout = new javax.swing.GroupLayout(GeneralInfo);
        GeneralInfo.setLayout(GeneralInfoLayout);
        GeneralInfoLayout.setHorizontalGroup(
            GeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GeneralInfoLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(GeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GeneralInfoLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(68, 68, 68)
                        .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(776, 776, 776)
                        .addComponent(Logout, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GeneralInfoLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(168, 168, 168)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(776, 776, 776)
                        .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GeneralInfoLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(gateInwardSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(search))))
        );
        GeneralInfoLayout.setVerticalGroup(
            GeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GeneralInfoLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(GeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(GeneralInfoLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Logout))
                .addGap(13, 13, 13)
                .addGroup(GeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(GeneralInfoLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Home))
                .addGap(18, 18, 18)
                .addGroup(GeneralInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gateInwardSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Items / توکي :");

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Rate/ unit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setCellSelectionEnabled(true);
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(itemTable);
        itemTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (itemTable.getColumnModel().getColumnCount() > 0) {
            itemTable.getColumnModel().getColumn(3).setResizable(false);
            itemTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Supplier / عرضه کونکی : ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Material / مواد : ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Item Code / د توکي کوډ : ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Initail Quantity / مقدار : ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Unit Price / د واحد قیمت : ");

        updateSupplier.setEditable(false);

        updateMaterial.setEditable(false);

        updateItemCode.setEditable(false);
        updateItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateItemCodeActionPerformed(evt);
            }
        });

        updateQuantity.setEditable(false);
        updateQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateQuantityActionPerformed(evt);
            }
        });

        updateUnitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateUnitPriceActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Update Items / توکي تازه کړئ :");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Total Price / ټول قیمت :  ");

        updateTotalPrice.setEditable(false);
        updateTotalPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTotalPriceActionPerformed(evt);
            }
        });

        updateRow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateRow.setText("Update / تازه");
        updateRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRowActionPerformed(evt);
            }
        });

        deleteRow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteRow.setText("Delete / ړنګول");
        deleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Tested Quantity / مقدار : ");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Dry Quantity / مقدار : ");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Percentage Dry / مقدار : ");

        testedQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testedQuantityActionPerformed(evt);
            }
        });

        wetQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wetQuantityActionPerformed(evt);
            }
        });

        percentageWet.setEditable(false);
        percentageWet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageWetActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Remaining Quantity / مقدار : ");

        remainingQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remainingQtyActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Store Location :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel6)
                            .addComponent(jLabel16)
                            .addComponent(jLabel7)
                            .addComponent(jLabel12))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(percentageWet, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(wetQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(updateTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(storeLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(142, 142, 142)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(testedQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remainingQty, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(818, 818, 818)
                        .addComponent(jLabel11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(930, 930, 930)
                        .addComponent(deleteRow, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(updateRow, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(updateSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(updateMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(updateItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(testedQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(wetQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(percentageWet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(remainingQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(updateUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(storeLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateRow)
                    .addComponent(deleteRow))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GeneralInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GeneralInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private int generateSerialNumber() throws SQLException 
    {
        int sNo=0;
        Statement stmt;
        ResultSet rs= null;
        String serial="SELECT max(serialNumber) from GRN";
        
        try{
         stmt=conn.createStatement();
         rs=stmt.executeQuery(serial);
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
            
        }
        
        if(rs.next())
        {
            sNo=rs.getInt(1);
            sNo++;
        }
        else
        {
            sNo=1;
        }
        
        return sNo;
        
    }
    
    
    
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        
        //checking for already updated
        
        boolean flag=false;
        
        for(int i=0;i<itemTable.getRowCount();i++)
        {
            if(itemTable.getValueAt(i, 5).equals(0)|| itemTable.getValueAt(i, 6).equals(0) )
            {
             flag=true;
             JOptionPane.showMessageDialog(null," Price not updated for row "+(i+1)+" !");
             break;
             //itemTable.setc
                
            }
            
        }
        
        if(flag==false)
        {
        
        
        
        Statement stmtCheck;
        ResultSet rsCheck= null;
        
        
        Statement stmt;
        ResultSet rs= null;
        
        Statement stmtInward;
        ResultSet rsInward= null;
        String res="No";
        
        
        Double qty=0.0;
        Double rate=0.0;
        String code=new String();
        java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
        int sr=Integer.parseInt(serialNumber.getText());
        int gateInwardId=Integer.parseInt(gateInwardSerial.getText());
        
        
        String checkEntry="Select updateStatus From GRN Where gateInwardId='"+gateInwardId+"' ";
        
        try {
            stmtInward=conn.createStatement();
            rsInward=stmtInward.executeQuery(checkEntry);

        } catch (SQLException ex) {
            Logger.getLogger(GRNPet.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            if(rsInward.next())
            {
                res=rsInward.getString(1);     
            }
            
            //rsInward=stmtInward.executeQuery(checkEntry);
        } catch (SQLException ex) {
            Logger.getLogger(GRNPet.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        if(res.equals("YES"))
        {
            JOptionPane.showMessageDialog(null," Cannot update, already updated! ");
        }
        else
        {
        
        //String supplier=supplierCombo.getSelectedItem().toString();
        //String material=materialCombo.getSelectedItem().toString();
        int rows=itemTable.getRowCount();
        
        PreparedStatement pstmt=null;
        
        String sql4="INSERT into GRN values (default,?,?,?,?,?,?,?,?,?,?,?)";
        
        try {
            pstmt = conn.prepareStatement(sql4);
        } catch (SQLException ex) {
            Logger.getLogger(GateInward.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        for(int row = 0; row<rows; row++)
            {
                System.out.println(itemTable.getValueAt(row, 2).toString());
                String itemCode =(itemTable.getValueAt(row, 2)).toString();//                    (String)tblCO2.getValueAt(row, 0);
                code=itemCode;
                Double quantity =Double.parseDouble((itemTable.getValueAt(row, 4)).toString());
                qty=quantity;
                Double unitPrice =Double.parseDouble((itemTable.getValueAt(row, 5)).toString());
                rate=unitPrice;
                Double totalPrice =Double.parseDouble(itemTable.getValueAt(row, 6).toString());
                Double pAge=Double.parseDouble(itemTable.getValueAt(row, 7).toString());
                String loc=itemTable.getValueAt(row, 8).toString();
            try {
                
                    pstmt.setTimestamp(1, date);
                    pstmt.setInt(2, sr);
                    pstmt.setInt(3,gateInwardId);
                    pstmt.setString(4,itemCode);
                    //pstmt.setString(5,itemCode);
                    pstmt.setDouble(5,quantity);
                    pstmt.setDouble(6,unitPrice);//unitPrice
                    pstmt.setDouble(7,totalPrice);//totalPrice
                    pstmt.setString(8,preparedBy.getText());
                    pstmt.setDouble(9,pAge);
                    pstmt.setString(10,"YES");
                    pstmt.setString(11,loc);
                    
                    
                    //updating stock
                    int initialQty=0;
          
                    String sql1="Select itemUnitPrice From stock WHERE itemCode  = '"+code+"'"; 
                    stmtCheck=conn.createStatement();
                    rsCheck=stmtCheck.executeQuery(sql1);

                    if(rsCheck.next())
                    {
                        initialQty=rsCheck.getInt(1);     
                    }

                    String update;

                    if(initialQty==0)//first entry of GRN
                    {
                       update="UPDATE stock  SET itemQuantity = itemQuantity + '"+qty+"' ,itemUnitPrice= '"+rate+"' WHERE itemCode  = '"+code+"'";

                    }          
                    else //averaging
                    {
                        System.out.println("averaging");
                       update="UPDATE stock  SET itemQuantity = itemQuantity + '"+qty+"' ,itemUnitPrice= (itemUnitPrice+'"+rate+"')/2 WHERE itemCode  = '"+code+"'";

                    }
                    stmt=conn.createStatement();
                    stmt.executeUpdate(update);
                    
                     pstmt.addBatch();
            } catch (SQLException ex) {
                     Logger.getLogger(GateInward.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                
        try {
           pstmt.executeBatch();
            //conn.commit();
          
//          int initialQty=0;
//          
//          String sql1="Select itemUnitPrice From stock WHERE itemCode  = '"+code+"'"; 
//          stmtCheck=conn.createStatement();
//          rsCheck=stmtCheck.executeQuery(sql1);
//          
//          if(rsCheck.next())
//        {
//            initialQty=rsCheck.getInt(1);     
//        }
//          
//          String update;
//          
//          if(initialQty==0)//first entry of GRN
//          {
//             update="UPDATE stock  SET itemQuantity = itemQuantity + '"+qty+"' ,itemUnitPrice= '"+rate+"' WHERE itemCode  = '"+code+"'";
// 
//          }          
//          else //averaging
//          {
//              System.out.println("averaging");
//             update="UPDATE stock  SET itemQuantity = itemQuantity + '"+qty+"' ,itemUnitPrice= (itemUnitPrice+'"+rate+"')/2 WHERE itemCode  = '"+code+"'";
//
//          }
//          stmt=conn.createStatement();
//          stmt.executeUpdate(update);
         //rs=stmt.executeQuery(update);
          
         JOptionPane.showMessageDialog(null,"  Successfully Saved! ");

         
        } catch (SQLException ex) {
            Logger.getLogger(GateInward.class.getName()).log(Level.SEVERE, null, ex);
        }  
        
        }
        
        } 
    }//GEN-LAST:event_submitActionPerformed

    private void serialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNumberActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        
        System.out.println("your id is:" + QASProject.userId);
        int inwardSerial=Integer.parseInt(gateInwardSerial.getText().toString());
        
        Statement stmt;
        ResultSet rs= null;

        
        String sql="SELECT g.supplier, g.material, g.itemCode,i.itemDescription,g.quantity, g.unitPrice,g.totalPrice,g.wetPercentage, g.storeLocation from gateInward AS g inner join ItemType AS i on g.itemCode=i.itemBarcode WHERE g.serialNumber ='"+inwardSerial+"' ";

//        String sql="SELECT supplier, material, itemCode,itemDescription,quantity from gateInward WHERE serialNumber ='"+inwardSerial+"' ";

        try{
            stmt=conn.createStatement();
            rs=stmt.executeQuery(sql);
            
            
            String header[] = new String[] { "Material", "Item Code",
            "Description", "Quantity","Wet Percentage","Store Location"};
            
            

        //dtm.setColumnIdentifiers(header);
        //itemTable.setTableHeader(header.toString());
            
            
                //System.out.println(rs."rs is null");
            
        itemTable.setModel(DbUtils.resultSetToTableModel(rs));
        //itemTable.setModel(dtm);
//        JTextField jt = new JTextField();
//        this.itemTable.getColumnModel().getColumn(1).setCellEditor(new javax.swing.DefaultCellEditor(jt));
//        Object[] row={(new javax.swing.DefaultCellEditor(jt)),"hello",jt.getComponents()};
//        //table.setDefaultRenderer(Object.class, new MultiLabelRenderer());

        //dtm.addRow(row);
            
            //itemTable.add(jCheckBox2, 4);
            
            // DefaultTableModel model=new DefaultTableModel()
//                {
//                  public Class<?> getColumnClass(int column)
//                  {
//                    switch(column)
//                    {
//                    case 0:
//                      return Boolean.class;
//                    case 1:
//                      return String.class;
//                    case 2:
//                      return String.class;
//                    case 3:
//                      return String.class;
//                    case 4:
//                      return String.class;
//
//                      default:
//                        return String.class;
//                    }
//                  }
//                };
//            
//             itemTable.setModel(model);
//
//                model.addColumn("Select");
//                model.addColumn("Position");
//                model.addColumn("Team");
//                model.addColumn("Points");
//                model.addColumn("Manager");
//                
//                for(int i=0;i<=7;i++)
//                    {
//                      model.addRow(new Object[0]);
//                      model.setValueAt(false,i,0);
//                      model.setValueAt(rs.getString(i),i,1);
//                      model.setValueAt(rs.getString(i+1),i,2);
//                      model.setValueAt(rs.getString(i+2),i,3);
//                      model.setValueAt(rs.getInt(i+3),i,3);
//                    }
//

                // First declare any component, say a JTextField
       

// The code below adds the component to the JTable column
      //this.itemTable.getColumnModel().getColumn(1).setCellEditor(new javax.swing.DefaultCellEditor(jt));
            
            //itemTable.setModel(DbUtils.resultSetToTableModel(rs));
            //itemTable.add(jCheckBox2, 4);
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());

        }

//        try {
//            while(rs.next())
//            {
//                System.out.println("not null");
//                desc=rs.getString(1);
//
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(GateInward.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        if(desc!=null){
//            descriptionCombo.setSelectedItem(desc);
//            setUnit(selected);
//            //descriptionCombo.disable();
//        }
    }                                             

    private void descriptionComboActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
//        Statement stmt;
//        ResultSet rs= null;
//
//        String selected=descriptionCombo.getSelectedItem().toString();
//        String sql="SELECT itemBarcode from itemType WHERE itemDescription ='"+selected+"' ";
//        String code=null;
//
//        try{
//            stmt=conn.createStatement();
//            rs=stmt.executeQuery(sql);
//        }
//        catch(Exception e)
//        {
//            System.out.println(e.getMessage());
//
//        }
//
//        try {
//            while(rs.next())
//            {
//                System.out.println("not null");
//                code=rs.getString(1);
//
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(GateInward.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        
//        
    }//GEN-LAST:event_searchActionPerformed

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        // TODO add your handling code here:
        String role=QASProject.userrole;
        
                    if(role.equals("Admin"))
                    {
                        adminHome obj=new adminHome();
                        obj.setVisible(true);
                        this.dispose();

                    }
                    
                    //manager
                    else if(role.equals("Manager"))
                    {
                        ManagerHome obj=new ManagerHome();
                        obj.setVisible(true);
                        this.dispose();

                    }
                    
                     //gateKeeper
                    else if(role.equals("Gate Keeper"))
                    {
                        gateKeeperHome obj=new gateKeeperHome();
                        obj.setVisible(true);
                        this.dispose();

                    }
                    //store Incharge
                    else if(role.equals("Store Incharge"))
                    {
                        storeInchargeHome obj=new storeInchargeHome();
                        obj.setVisible(true);
                        this.dispose();

                    }
                    
                    //finished goods store incharge
                    else if(role.equals("Warehouse Incharge"))
                    {
                        FinishedStoreInchargeHome obj=new FinishedStoreInchargeHome();
                        obj.setVisible(true);
                        this.dispose();
                    }
        
    }//GEN-LAST:event_HomeActionPerformed

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed
        // TODO add your handling code here:
        login obj=new login();
        obj.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_LogoutActionPerformed

    private void updateRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRowActionPerformed
        // TODO add your handling code here:
        
        int i= itemTable.getSelectedRow();
        DefaultTableModel model= (DefaultTableModel)itemTable.getModel();
        
        if(i>=0)
        {
//            model.setValueAt(updateSupplier.getText(), i, 0);
//            model.setValueAt(updateMaterial.getText(), i, 1);
//            model.setValueAt(updateItemCode.getText(), i, 2);
            model.setValueAt(remainingQty.getText(), i, 4);
            model.setValueAt(updateUnitPrice.getText(), i, 5);
            model.setValueAt(updateTotalPrice.getText(), i, 6);
            model.setValueAt(percentageWet.getText(), i, 7);
            model.setValueAt(storeLocation.getText(), i, 8);
            
            
        }
        else
        {
            JOptionPane.showMessageDialog(null," Please select a row");
        }
    }//GEN-LAST:event_updateRowActionPerformed

    private void deleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowActionPerformed
        // TODO add your handling code here:
        int row=itemTable.getSelectedRow();
        DefaultTableModel model= (DefaultTableModel)itemTable.getModel();
        
        int opt=JOptionPane.showConfirmDialog(null,"Do you want to Delete?","Delete", JOptionPane.YES_NO_OPTION);
        if(row>=0)
        {
            if(opt==0)
            {
            model.removeRow(row);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null," Please select a row");
        }
    }//GEN-LAST:event_deleteRowActionPerformed

    private void updateItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateItemCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateItemCodeActionPerformed

    private void updateQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateQuantityActionPerformed

    private void updateUnitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateUnitPriceActionPerformed
        // TODO add your handling code here:
       Double uPrice=Double.parseDouble(updateUnitPrice.getText().toString());
       Double qty=Double.parseDouble(remainingQty.getText().toString());
       
       Double tPrice=uPrice*qty;
       updateTotalPrice.setText(Double.toString(tPrice));
    }//GEN-LAST:event_updateUnitPriceActionPerformed

    private void updateTotalPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTotalPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateTotalPriceActionPerformed

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        // TODO add your handling code here:
        int selectedRow=itemTable.getSelectedRow();
        DefaultTableModel model= (DefaultTableModel)itemTable.getModel();
        updateSupplier.setText(model.getValueAt(selectedRow, 0).toString());
        updateMaterial.setText(model.getValueAt(selectedRow, 1).toString());
        updateItemCode.setText(model.getValueAt(selectedRow, 2).toString());
        updateQuantity.setText(model.getValueAt(selectedRow, 4).toString());
        updateUnitPrice.setText(model.getValueAt(selectedRow, 5).toString());
        updateTotalPrice.setText(model.getValueAt(selectedRow, 6).toString());
        percentageWet.setText(model.getValueAt(selectedRow, 7).toString());
                
        
        
    }//GEN-LAST:event_itemTableMouseClicked

    private void preparedByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preparedByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_preparedByActionPerformed

    private void testedQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testedQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testedQuantityActionPerformed

    private void wetQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wetQuantityActionPerformed
        // TODO add your handling code here:
        double tQty=0.0;
        double wQty=0.0;
        double pAge=0.0;
        
        tQty=Double.parseDouble(testedQuantity.getText());
        System.out.println(tQty);
        
        wQty=Double.parseDouble(wetQuantity.getText());
        System.out.println(wQty);
        
        
        pAge=wQty/tQty;
        //pAge=5/20;
        System.out.println(pAge);
        pAge=pAge*100.0;     //   *100;
        
        //pAge=100.0-pAge;
        
        System.out.println(pAge);
        percentageWet.setText(Double.toString(pAge));
        
        double qtyFactor=0.0;
        
        if(pAge==0.0)
        {
            qtyFactor=1.0;
        }
        else
        {
            qtyFactor=pAge/100.0;
        }
        double actualQty=Double.parseDouble(updateQuantity.getText().toString());
        
        double minusQty=actualQty*qtyFactor;
        //double remQty=actualQty-minusQty;
        
        remainingQty.setText(Double.toString(minusQty));
        
    }//GEN-LAST:event_wetQuantityActionPerformed

    private void percentageWetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageWetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_percentageWetActionPerformed

    private void remainingQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remainingQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remainingQtyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GRNPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GRNPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GRNPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GRNPet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GRNPet().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(GRNPet.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GeneralInfo;
    private javax.swing.JButton Home;
    private javax.swing.JButton Logout;
    private javax.swing.JTextField date;
    private javax.swing.JButton deleteRow;
    private javax.swing.JTextField gateInwardSerial;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField percentageWet;
    private javax.swing.JTextField preparedBy;
    private javax.swing.JTextField remainingQty;
    private javax.swing.JButton search;
    private javax.swing.JTextField serialNumber;
    private javax.swing.JTextField storeLocation;
    private javax.swing.JButton submit;
    private javax.swing.JTextField testedQuantity;
    private javax.swing.JTextField updateItemCode;
    private javax.swing.JTextField updateMaterial;
    private javax.swing.JTextField updateQuantity;
    private javax.swing.JButton updateRow;
    private javax.swing.JTextField updateSupplier;
    private javax.swing.JTextField updateTotalPrice;
    private javax.swing.JTextField updateUnitPrice;
    private javax.swing.JTextField wetQuantity;
    // End of variables declaration//GEN-END:variables
}
